#!/bin/bash
# -------------------------------------------------------------------------------
# Filename:    passwordGenerator
# Revision:    1.0.0
# Date:        2017/04/28
# Author:      yuan1994
# Email:       tianpian0805@gmail.com
# Website:     www.yuan1994.com
# Description: A tool for generating a random password
# -------------------------------------------------------------------------------
# Copyright:   2017 (c) yuan1994
# License:     GPL
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# you should have received a copy of the GNU General Public License
# along with this program (or with Nagios);
#
# Credits go to Ethan Galstad for coding Nagios
# If any changes are made to this script, please mail me a copy of the changes
# -------------------------------------------------------------------------------
# Version 1.0.0
# First publish

length=16;
mixed='aAn'; # a - a-z; A - A-Z; n - 0-9; s - symbol
symbol='!@#$%^&*';
string_pool=''

# usage
function usage()
{
  echo "Usage: passwordGenerator [args...]"
  echo ""
  echo "[ Arguments ]"
  echo "  -l <number>      Set the password\`s length"
  echo "  -m <option>      Set the password\`s mixed stringï¼Œdefault 'aAn'"
  echo "                     'a' means alphabet include a-z"
  echo "                     'A' means capital alphabet include A-Z"
  echo "                     'n' means numbers include 0-9"
  echo "                     's' means symbol for your defined default '!@#$%^&*'"
  echo "  -s <symbol>      Set the symbol"
  echo ""

  exit 0
}

# generate a random number
# random min max, such as `random 1 99` generate between 1 and 99 number
function random()
{
  local min=$1
  local max=$(($2 - $min + 1))
  local num=$(cat /dev/urandom | head -n 10 | cksum | awk -F ' ' '{print $1}')

  echo $(($num % $max + $min))
}

# traverse string
function foreach()
{
  local index=0
  local str=$1
  local callback=$2
  while (( $index < ${#str} )); do
    $callback ${str:$index:1}
    let "index++"
  done
}

# merge string pool
function merge_string_pool()
{
  case $1 in
    a)
      string_pool="${string_pool}abcdefghijklmnopqrstuvwxyz"
    ;;
    A)
      string_pool="${string_pool}ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    ;;
    n)
      string_pool="${string_pool}0123456789"
    ;;
    s)
      string_pool="${string_pool}${symbol}"
    ;;
    *)
      echo "The mixed only in 'a', 'A', 'n', 's'"
      exit 1
    ;;
  esac
}

# set string pool
function set_string_pool()
{
  foreach $mixed merge_string_pool
}

# generate password
function generate_password()
{
  local password=''
  local pool_size=`expr ${#string_pool} - 1`
  while (( $length > 0 )); do
    local index=`random 0 $pool_size`
    password="${password}${string_pool:${index}:1}"
    let "length--"
  done
  echo "$password"
}

# progress options
while getopts l:m:s:,h opt; do
  case "$opt" in
    l)
      length=$OPTARG
    ;;
    m)
      mixed=$OPTARG
    ;;
    s)
      symbol=$OPTARG
    ;;
    h)
      usage
    ;;
  esac
done

set_string_pool
echo `generate_password`

exit 0
